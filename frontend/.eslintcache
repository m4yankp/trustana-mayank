[{"/Applications/MAMP/htdocs/trustana/frontend/src/index.tsx":"1","/Applications/MAMP/htdocs/trustana/frontend/src/reportWebVitals.ts":"2","/Applications/MAMP/htdocs/trustana/frontend/src/App.tsx":"3","/Applications/MAMP/htdocs/trustana/frontend/src/Routes.tsx":"4","/Applications/MAMP/htdocs/trustana/frontend/src/Store.tsx":"5","/Applications/MAMP/htdocs/trustana/frontend/src/layout/Footer.tsx":"6","/Applications/MAMP/htdocs/trustana/frontend/src/layout/Header.tsx":"7","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Login/index.tsx":"8","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Public/index.tsx":"9","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Register/index.tsx":"10","/Applications/MAMP/htdocs/trustana/frontend/src/layout/Loader.tsx":"11","/Applications/MAMP/htdocs/trustana/frontend/src/config.tsx":"12","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Dashboard/index.tsx":"13","/Applications/MAMP/htdocs/trustana/frontend/src/components/userData/index.tsx":"14","/Applications/MAMP/htdocs/trustana/frontend/src/services/index.ts":"15","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Logout/index.tsx":"16","/Applications/MAMP/htdocs/trustana/frontend/src/components/GeneratePublicToken/index.tsx":"17","/Applications/MAMP/htdocs/trustana/frontend/src/components/GetUserData/index.tsx":"18","/Applications/MAMP/htdocs/trustana/frontend/src/hooks/index.tsx":"19","/Applications/MAMP/htdocs/trustana/frontend/src/components/userTable/index.tsx":"20"},{"size":547,"mtime":1609079879066,"results":"21","hashOfConfig":"22"},{"size":416,"mtime":1609079879069,"results":"23","hashOfConfig":"22"},{"size":407,"mtime":1609095187887,"results":"24","hashOfConfig":"22"},{"size":1178,"mtime":1609158147031,"results":"25","hashOfConfig":"22"},{"size":1354,"mtime":1609097131091,"results":"26","hashOfConfig":"22"},{"size":262,"mtime":1609079879067,"results":"27","hashOfConfig":"22"},{"size":862,"mtime":1609158147033,"results":"28","hashOfConfig":"22"},{"size":3448,"mtime":1609162524970,"results":"29","hashOfConfig":"22"},{"size":1587,"mtime":1609168050317,"results":"30","hashOfConfig":"22"},{"size":9690,"mtime":1609182996994,"results":"31","hashOfConfig":"22"},{"size":246,"mtime":1609079879067,"results":"32","hashOfConfig":"22"},{"size":55,"mtime":1609064540818,"results":"33","hashOfConfig":"34"},{"size":817,"mtime":1609099137978,"results":"35","hashOfConfig":"22"},{"size":268,"mtime":1609164649578,"results":"36","hashOfConfig":"22"},{"size":3506,"mtime":1609173844100,"results":"37","hashOfConfig":"22"},{"size":561,"mtime":1609095375983,"results":"38","hashOfConfig":"22"},{"size":3776,"mtime":1609168910575,"results":"39","hashOfConfig":"22"},{"size":2576,"mtime":1609162741435,"results":"40","hashOfConfig":"22"},{"size":530,"mtime":1609162566622,"results":"41","hashOfConfig":"22"},{"size":1006,"mtime":1609181255371,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1vx0wbl",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"40mmj5",{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"45"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Applications/MAMP/htdocs/trustana/frontend/src/index.tsx",[],["94","95"],"/Applications/MAMP/htdocs/trustana/frontend/src/reportWebVitals.ts",[],"/Applications/MAMP/htdocs/trustana/frontend/src/App.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/Routes.tsx",["96"],"import React, { useContext } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Register from './pages/Register';\nimport Public from './pages/Public';\nimport Logout from './pages/Logout';\nimport { Store } from './Store';\n\nexport default function Routes() {\n  const { state, dispatch } = useContext(Store);\n    return (\n       <HashRouter>\n        <Switch>\n          <Route exact path='/' component={Login} />\n          <Route exact path='/register' component={Register} />\n          {state.loginToken &&  <Route exact path='/dashboard' component={Dashboard} /> }\n          <Route exact path='/logout' component={Logout} />\n          <Route exact path='/public/:token' component={Public} />\n          <Route path='*' >\n             <Container className=\"mt-3 mb-3\">\n                <Row>\n                    <Col md={12}>\n                        <h1>404 Page Not Found</h1>\n                    </Col>\n                </Row>\n             </Container>\n          </Route>\n        </Switch>\n      </HashRouter>\n    )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/Store.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/layout/Footer.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/layout/Header.tsx",["97"],"import React, { useContext } from 'react'\nimport { Navbar, Image, Nav } from 'react-bootstrap'\nimport { Store } from '../Store';\n\nexport default function Header(): JSX.Element {\n  const { state, dispatch } = useContext(Store);\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"/\">\n        <Image src={'/trustana-logo.png'} height={24} className=\"p5\" />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n       {!state.loginToken ? <Nav className=\"ml-auto\">\n          <Nav.Link href=\"/#/register\">Register</Nav.Link>\n          <Nav.Link href=\"/#/\">Login</Nav.Link> \n        </Nav> : \n        <Nav className=\"ml-auto\">\n        <Nav.Link href=\"/#/logout\">Logout</Nav.Link> \n        </Nav>}\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Login/index.tsx",["98"],"import React, { useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap'\nimport { LoginService } from '../../services/';\nimport { useFormFields } from '../../hooks';\nimport Loader from '../../layout/Loader'\nimport { Store } from '../../Store'\n\nexport default function Login(): JSX.Element {\n  const { state, dispatch } = useContext(Store);\n  const { formFields, createChangeHandler, setValue } = useFormFields({\n    username:'',\n    password:'',\n    isLoading:false,\n    validated:false,\n    isError:false\n  });\n  const history = useHistory();\n\n  const handleSubmit = async(event: any) => {\n    const form = event.currentTarget;\n    setValue(\"isLoading\",true);\n    setValue(\"validated\",true);\n    event.preventDefault();\n    event.stopPropagation();\n    if (form.checkValidity() === false) {\n      setValue(\"isLoading\",false);\n    }\n   else{\n      formFields.isLoading = false;\n      if(formFields.username.length > 0 && formFields.password.length > 0)\n      {\n        const response = await LoginService(formFields.username,formFields.password);\n        setValue(\"isLoading\",false);\n        setValue(\"validated\",false);\n        if(response.error === true)\n        {\n          setValue(\"isError\",true);\n        }\n        else\n        {\n          dispatch({\n            type:'SET_TOKEN',\n            payload: {\n              token: response.token,\n              username: formFields.username\n            }\n          });\n          history.push('/dashboard');\n          setValue(\"isError\",false);\n        }\n      }\n   }\n  };\n   return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Col md=\"12\">\n          <h2 className=\"text-center\">Login</h2>\n        </Col>\n      </Row>\n      <Row>\n        <Col md=\"12\">\n          {formFields.isError && <Alert data-testid=\"alert\" variant=\"danger\">Invalid username and password</Alert>}\n       <Form noValidate validated={formFields.validated} onSubmit={handleSubmit}>\n      <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationCustomUsername\">\n          <Form.Label>Username</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Username\"\n              value={formFields.username}\n              onChange={createChangeHandler(\"username\")}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n             Please enter a valid username.\n            </Form.Control.Feedback>\n        </Form.Group>\n        </Form.Row>\n        <Form.Row>\n        <Form.Group as={Col} md=\"12\" controlId=\"validationCustomPassword1\">\n          <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              value={formFields.password}\n              onChange={createChangeHandler(\"password\")}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please enter a password.\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form.Row>\n          {!formFields.isLoading ? <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button> : <Loader />}\n              </Form>\n        </Col>\n      </Row>\n      <Row>\n        <Col md=\"12\">\n          <p style={{marginTop:20}}>Or <Link to=\"/register\">Click here to Register</Link></p>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Public/index.tsx",["99"],"import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col, Alert } from 'react-bootstrap';\nimport { IUserData } from \"../../Interfaces\";\nimport { useParams } from 'react-router-dom';\nimport UserTable from '../../components/userTable'\nimport { GetPublicData } from '../../services';\nimport Loader from '../../layout/Loader'\n\nexport default function Public():JSX.Element {\n  const [isLoading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [state, setState] = useState<IUserData>({\n    firstName:\"\",\n    lastName:\"\",\n    dateOfBirth:\"\",\n    address:\"\",\n    filePath:\"\",\n    dateCreated:\"\"\n  })\n  const [isError, setError] = useState(false);\n  const {token} = useParams<{token:string}>();\n\n  useEffect(()=>{\n    state.firstName === \"\" && loadData()   \n  },[ state ])\n\n  const loadData = async() =>{\n    setLoading(true);\n    const response = await GetPublicData(token);\n    \n    if(response.error)\n    {\n      setMessage(response.message);\n      setError(true);\n      setLoading(false);\n    }\n    else\n    {\n      setLoading(false);\n      setState({firstName: response.firstName, lastName: response.lastName,dateOfBirth: response.dateOfBirth,address: response.address, filePath: response.filePath, dateCreated: response.dateCreated});\n    }\n  }\n  return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Col md=\"12\">\n          {isError && <Alert data-testid=\"alert\" variant=\"danger\">{message}</Alert> }\n          {isLoading ? <Loader /> : <UserTable state={state} />}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Register/index.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/layout/Loader.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/config.tsx",[],["100","101"],"/Applications/MAMP/htdocs/trustana/frontend/src/pages/Dashboard/index.tsx",["102"],"import React, {useContext} from 'react';\nimport { Container, Row, Col} from 'react-bootstrap'\nimport GeneratePublicToken from '../../components/GeneratePublicToken';\nimport GetUserData from '../../components/GetUserData';\nimport { Store } from '../../Store'\n\n\nexport default function Dashboard(): JSX.Element {\n   const { state, dispatch } = useContext(Store);\n   return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Col md=\"12\">\n          <h2 className=\"text-center\">Hello! {state.username}</h2>\n        </Col>\n      </Row>\n      <GetUserData />\n      <Row>\n        <Col md=\"12\">\n          <p style={{marginTop:20, textAlign:'center',marginBottom:20}}>Or Enter details below to generate a public link</p>\n        </Col>\n      </Row>\n       \n      <GeneratePublicToken />\n      \n    </Container>\n  )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/components/userData/index.tsx",["103"],"import React, { useContext } from 'react';\nimport UserTable  from \"../userTable\";\nimport { Store } from '../../Store';\n\nexport default function UserData(): JSX.Element {\n  const { state, dispatch } = useContext(Store);\n  return (\n    <UserTable state={state} />\n  )\n}\n","/Applications/MAMP/htdocs/trustana/frontend/src/services/index.ts",["104","105","106","107"],"import axios from 'axios';\nimport * as qs from 'querystring';\nimport * as dotenv from 'dotenv';\nimport fs, { ReadStream } from 'fs';\nimport { Login , Register } from '../Interfaces';\nimport { Path } from 'typescript';\n\nconst config: any = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}\n// Login User\nexport const LoginService = async(username: string, password: string) =>{\n    dotenv.config();\n    const API_URL: string = (process.env.REACT_APP_API_URL as string);\n    const params: Login = {\n        username: username,\n        password: password\n    };\n    try{\n        const res = await axios.post(`${API_URL}/api/auth`, qs.stringify(params),config);\n        return res.data;\n    }\n    catch(error)\n    {\n        return error.response.data;\n    }\n}\n// Register User\nexport const RegisterService = async(firstName: string, lastName: string, dateOfBirth:  string, username: string, password: string, secret: string, address: string, filePath: any ) => {\n    dotenv.config();\n    const API_URL: string = (process.env.REACT_APP_API_URL as string);\n    var data = new FormData();\n    data.append('firstName', firstName);\n    data.append('secret', secret);\n    data.append('lastName', lastName);\n    data.append('dateOfBirth', dateOfBirth);\n    data.append('address', address);\n    data.append('username', username);\n    data.append('password', password);\n    data.append('filePath', filePath);\n    const config = {\n        headers: { \n       \n        },\n    };\n    try{\n        const res = await axios.post(`${API_URL}/api/user`, data, config);\n        return res.data;\n    }\n    catch(error)\n    {\n        return error.response.data;\n    }\n}\n// Get Logged In User's Data\nexport const LoggedInUserData = async(token:string, secret_code: string) => {\n    dotenv.config();\n    const API_URL: string = (process.env.REACT_APP_API_URL as string);\n    const params: any = {\n        secret_code: secret_code\n    }\n    const config = {\n        headers: {\n        'Authorization': 'Bearer ' + token,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        }\n    };\n    try{\n        const res = await axios.post(`${API_URL}/api/myData`,qs.stringify(params),config);\n        return res.data;\n    }\n    catch(error)\n    {\n        return error.response.data;\n    }\n}\n\n// Create Token For Public Usage Of Data\nexport const PublicToken = async( token: string, secret_code: string, expiryTime:string) => {\n    dotenv.config();\n    const API_URL: string = (process.env.REACT_APP_API_URL as string);\n    const config = {\n        headers: {\n        'Authorization': 'Bearer ' + token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    }\n    const params: any = {\n        expiryTime: expiryTime,\n        secret_code: secret_code\n    }\n    try{\n        const res = await axios.post(`${API_URL}/api/createTemporaryToken`, qs.stringify(params), config);\n        return res.data;\n    }\n    catch(error)\n    {\n        return error.response.data;\n    }\n}\n\n// Get Public Data\n\nexport const GetPublicData = async(token: string) => {\n    dotenv.config();\n    const API_URL: string = (process.env.REACT_APP_API_URL as string);\n    const config = {\n        headers: {\n        'Authorization': 'Bearer ' + token,\n        'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    }\n    try{\n        const res = await axios.get(`${API_URL}/api/getPublicData`, config);\n        return res.data;\n    }\n    catch(error)\n    {\n        return error.response.data;\n    }\n}","/Applications/MAMP/htdocs/trustana/frontend/src/pages/Logout/index.tsx",["108"],"import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nimport { Store } from '../../Store'\nexport default function Logout(): JSX.Element {\n    const { state, dispatch } = useContext(Store);\n    const history = useHistory();\n    dispatch({\n            type:'LOGOUT',\n          });\n    history.push('/');\n    return (\n    <Container className=\"mt-3 mb-3\">\n      <Row>\n        <Col md=\"12\">\n            <h2>Logging Out</h2>\n        </Col>\n    </Row>\n    </Container>\n    )\n}","/Applications/MAMP/htdocs/trustana/frontend/src/components/GeneratePublicToken/index.tsx",["109"],"import React, { useContext } from 'react';\nimport { Row, Col, Form, Button, Alert } from 'react-bootstrap'\nimport * as dotenv from 'dotenv';\nimport { PublicToken } from '../../services';\nimport Loader from '../../layout/Loader';\nimport { useFormFields } from '../../hooks';\nimport { Store } from '../../Store';\n\n\nexport default function GeneratePublicToken(): JSX.Element {\n  dotenv.config();\n  const { state, dispatch } = useContext(Store);\n   const { formFields, createChangeHandler, setValue } = useFormFields({\n      isLoadingPublic: false,\n      isErrorPublic: false,\n      validatedPublicForm: false,\n      secretTokenPublic: '',\n      expiryTime:'',\n      publicToken:''\n    });\n\n\n  const handleSubmitPublicForm = async(event: any) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    event.stopPropagation();\n    setValue(\"validatedPublicForm\",true);\n    if (!form.checkValidity() === false) {\n      setValue(\"isLoadingPublic\",true);      \n      if(formFields.expiryTime.length > 0 && formFields.secretTokenPublic)\n      {\n        const response = await PublicToken(state.loginToken, formFields.secretTokenPublic, formFields.expiryTime);\n          setValue(\"isLoadingPublic\",false);   \n        if(response.error)\n        {\n          setValue(\"isErrorPublic\",true); \n        }\n        else\n        {\n          setValue(\"validatedPublicForm\",false);\n          setValue(\"publicToken\",response.token);\n          setValue(\"secretTokenPublic\",'');\n          setValue(\"expiryTime\",'');\n        }\n      }\n      else\n      {\n        setValue(\"isLoadingPublic\",false);\n        setValue(\"isErrorPublic\",false);\n        setValue(\"validatedPublicForm\",false);\n      }\n      \n    }\n  };\n return (\n     <Row>\n        <Col md=\"12\">\n\n     <Form noValidate validated={formFields.validatedPublicForm} onSubmit={handleSubmitPublicForm}>\n         {formFields.isErrorPublic && <Alert data-testid=\"alert\" variant=\"danger\">Invalid Secret Code or expiry time</Alert>}\n      <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationCustomToken\">\n          <Form.Label>Secret Code</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Secret Token To Access Your Data\"\n              value={formFields.secretTokenPublic}\n              onChange={createChangeHandler(\"secretTokenPublic\")}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n             Please enter a valid secret token.\n            </Form.Control.Feedback>\n        </Form.Group>\n         <Form.Group as={Col} md=\"12\" controlId=\"validationCustomExpiryTime\">\n          <Form.Label>Link expiry Time</Form.Label>\n            <Form.Control\n              type=\"text\"\n              placeholder='Time should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\"'\n              value={formFields.expiryTime}\n              onChange={createChangeHandler(\"expiryTime\")}\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n             Please enter a valid expiry time. It should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\"\n            </Form.Control.Feedback>\n        </Form.Group>\n        </Form.Row>\n         {!formFields.isLoadingPublic ? <Button variant=\"primary\" type=\"submit\">\n            Generate Public Link\n          </Button> : <Loader /> }\n          </Form>\n          {formFields.publicToken && <Row>\n            <Col md=\"12\">\n              <Form.Control\n                className=\"mt-4\"\n                type=\"text\" \n                value={`${process.env.REACT_APP_URL}/#/public/${formFields.publicToken}`}\n                readOnly={true}\n              />\n            </Col>\n          </Row>}\n          \n        </Col>\n    </Row>\n);\n}","/Applications/MAMP/htdocs/trustana/frontend/src/components/GetUserData/index.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/hooks/index.tsx",[],"/Applications/MAMP/htdocs/trustana/frontend/src/components/userTable/index.tsx",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":12,"column":18,"nodeType":"116","messageId":"117","endLine":12,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":6,"column":18,"nodeType":"116","messageId":"117","endLine":6,"endColumn":26},{"ruleId":"114","severity":1,"message":"118","line":10,"column":11,"nodeType":"116","messageId":"117","endLine":10,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":25,"column":5,"nodeType":"121","endLine":25,"endColumn":14,"suggestions":"122"},{"ruleId":"110","replacedBy":"123"},{"ruleId":"112","replacedBy":"124"},{"ruleId":"114","severity":1,"message":"115","line":9,"column":19,"nodeType":"116","messageId":"117","endLine":9,"endColumn":27},{"ruleId":"114","severity":1,"message":"115","line":6,"column":18,"nodeType":"116","messageId":"117","endLine":6,"endColumn":26},{"ruleId":"114","severity":1,"message":"125","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":10},{"ruleId":"114","severity":1,"message":"126","line":4,"column":14,"nodeType":"116","messageId":"117","endLine":4,"endColumn":24},{"ruleId":"114","severity":1,"message":"127","line":5,"column":18,"nodeType":"116","messageId":"117","endLine":5,"endColumn":26},{"ruleId":"114","severity":1,"message":"128","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":14},{"ruleId":"114","severity":1,"message":"118","line":7,"column":13,"nodeType":"116","messageId":"117","endLine":7,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":12,"column":18,"nodeType":"116","messageId":"117","endLine":12,"endColumn":26},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["131"],["129"],["130"],"'fs' is defined but never used.","'ReadStream' is defined but never used.","'Register' is defined but never used.","'Path' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},"Update the dependencies array to be: [loadData, state]",{"range":"134","text":"135"},[813,822],"[loadData, state]"]